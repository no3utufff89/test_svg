@charset "UTF-8";

@font-face {
  font-family: FaberSansPro;
  font-display: swap;
  src: url("../fonts/FaberSansPro-400.woff2") format("woff2"), url("../fonts/FaberSansPro-400.woff") format("woff");
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: Directo;
  font-display: swap;
  src: url("../fonts/Directo-700.woff2") format("woff2"), url("../fonts/Directo-700.woff") format("woff");
  font-weight: 700;
  font-style: normal;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
nav,
section,
summary {
  display: block;
}

audio,
canvas,
video {
  display: inline-block;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

[hidden],
template {
  display: none;
}

html {
  background: #fff;
  color: #000;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}

html,
button,
input,
select,
textarea {
  font-family: sans-serif;
}

body {
  margin: 0;
}

a {
  background: transparent;
}

a:focus {
  outline: thin dotted;
}

a:hover,
a:active {
  outline: 0;
}

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

h2 {
  font-size: 1.5em;
  margin: 0.83em 0;
}

h3 {
  font-size: 1.17em;
  margin: 1em 0;
}

h4 {
  font-size: 1em;
  margin: 1.33em 0;
}

h5 {
  font-size: 0.83em;
  margin: 1.67em 0;
}

h6 {
  font-size: 0.75em;
  margin: 2.33em 0;
}

abbr[title] {
  border-bottom: 1px dotted;
}

b,
strong {
  font-weight: bold;
}

dfn {
  font-style: italic;
}

mark {
  background: #ff0;
  color: #000;
}

code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}

pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word;
}

q {
  quotes: "“" "”" "‘" "’";
}

q:before,
q:after {
  content: "";
  content: none;
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

img {
  border: 0;
}

svg:not(:root) {
  overflow: hidden;
}

figure {
  margin: 0;
}

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

legend {
  border: 0;
  padding: 0;
  white-space: normal;
}

button,
input,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
  vertical-align: baseline;
}

button,
input {
  line-height: normal;
}

button,
select {
  text-transform: none;
}

button,
html input[type=button],
input[type=reset],
input[type=submit] {
  -webkit-appearance: button;
  cursor: pointer;
}

button[disabled],
input[disabled] {
  cursor: default;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

textarea {
  overflow: auto;
  vertical-align: top;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

input[type=search] {
  -webkit-appearance: textfield;
  -webkit-box-sizing: content-box;
  box-sizing: content-box;
}

input[type=search]::-webkit-search-cancel-button,
input[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

input[type=checkbox],
input[type=radio] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  padding: 0;
}

html {
  position: relative;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  scroll-behavior: smooth;
}

*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  padding: 0;
  margin: 0;
  border: 0;
}

:focus,
:active,
a:focus,
a:active {
  outline: none;
}

html,
body {
  line-height: 1;
  -webkit-text-size-adjust: 100%;
}

input,
button,
textarea {
  font-family: inherit;
}

input::-ms-clear {
  display: none;
}

button,
a {
  cursor: pointer;
}

button::-moz-focus-inner {
  padding: 0;
  border: 0;
}

ul li {
  list-style: none;
  margin: 0;
  padding: 0;
}

img,
figure,
picture > object {
  max-width: 100%;
  height: auto;
}

img {
  max-width: 100%;
  display: block;
}

a {
  text-decoration: none;
  color: inherit;
}

a:focus,
a:hover,
a:active,
a:visited {
  text-decoration: none;
  color: inherit;
}

fieldset {
  border: none;
  margin: 0;
  padding: 0;
}

body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
li,
figure,
figcaption,
blockquote,
dl,
dd {
  margin: 0;
}

:root {
  /* Макет
  Глобальный корректор значений */
  --c: 1;
  /* Ограничение ширины страницы */
  --page-width: unset;
  /* Отступ контента */
  --content-indents: calc(48px * var(--c));
  /* Количество колонок */
  --grid-columns: 12;
  /* Отступы контента от края экрана */
  --grid-sides: calc(32px * var(--c));
  /* Отступы между колонками и по бокам секций */
  --grid-gutter: calc(16px * var(--c));
  /* Подсчет размера колонок */
  --grid-column-width: calc(
      (100vw - var(--grid-gutter) * var(--grid-columns)) / var(--grid-columns)
  );
  /* Отступы сверху/снизу секций */
  --section-padding: var(--grid-gutter);
  /* Отступы между секций */
  --section-gap: calc(var(--grid-gutter) * 4);
  /* Ограничение ширины контента */
  --content-width: calc(
      100% + var(--grid-gutter) - ((var(--grid-gutter) + var(--grid-column-width)) * 4)
  ); /* Ширина контента -2 колонки
--content-width: unset; Нефиксированный размер контента */
}

/* Адаптивность */

body.not-webp picture > source[type*=webp] {
  display: none;
}

body {
  min-width: 320px;
  font-family: FaberSansPro, sans-serif;
  font-weight: 400;
  color: #000;
  background-color: #f5f4ff;
  font-size: 20px;
  overflow-x: hidden;
}

.visually-hidden {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  padding: 0 !important;
  border: 0 !important;
  height: 1px !important;
  width: 1px !important;
  overflow: hidden;
}

.container {
  margin: 0 auto;
  max-width: 1180px;
  padding-left: 15px;
  padding-right: 15px;
}

.h1 {
  font-family: "Directo", sans-serif;
  font-size: 36px;
  font-weight: 700;
  line-height: 50px;
}

.p {
  font-size: 20px;
  line-height: 30px;
  font-weight: 400;
}

.logo-link {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-negative: 0;
      flex-shrink: 0;
}

.logo-link__image {
  width: 4em;
  height: 5em;
}

.nav-list {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-column-gap: 20px;
     -moz-column-gap: 20px;
          column-gap: 20px;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.header {
  -webkit-box-shadow: 4px 4px 28px 4px rgba(34, 60, 80, 0.2);
          box-shadow: 4px 4px 28px 4px rgba(34, 60, 80, 0.2);
}

.header__row {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.header__nav {
  display: block;
}

.social-list {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-column-gap: 20px;
     -moz-column-gap: 20px;
          column-gap: 20px;
}

.social-list__link {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  width: 40px;
  height: 40px;
  border-radius: 9px;
  border: 1px solid transparent;
  padding: 10px;
}

.social-list__link:hover svg {
  scale: 1.2;
}

.social-list__link_tg {
  background-color: #0088cc;
}

.social-list__link_tg svg {
  color: #fff;
  -webkit-transition: 0.3s ease-in-out;
  transition: 0.3s ease-in-out;
}

.social-list__link_git {
  background-color: #171515;
}

.social-list__link_git svg {
  color: #fff;
  -webkit-transition: 0.3s ease-in-out;
  transition: 0.3s ease-in-out;
}

.social-list__link svg {
  width: 24px;
  height: 24px;
  -ms-flex-negative: 0;
      flex-shrink: 0;
}

@media (max-width: 1200px){
  :root {
    --grid-columns: 8;
    --content-width: calc(
        100% + var(--grid-gutter) - ((var(--grid-gutter) + var(--grid-column-width)) * 2)
    );
  }
}

@media (max-width: 1050px){
  .container {
    max-width: 768px;
  }
  .h1 {
    font-size: 32px;
    line-height: 46px;
  }
  .logo-link__image {
    width: 2em;
    height: 3em;
  }
}

@media (max-width: 852px){
  :root {
    --grid-columns: 6;
    --c: 0.85;
    --content-width: 100%;
  }
}

@media (max-width: 745px){
  .h1 {
    font-size: 22px;
    line-height: 32px;
  }
  .header__nav {
    display: none;
  }
}

@media screen and (max-width: 550px){
  .p {
    font-size: 15px;
    line-height: 24px;
  }
}

@media (max-width: 520px){
  :root {
    --c: 0.7;
    --grid-columns: 4;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
